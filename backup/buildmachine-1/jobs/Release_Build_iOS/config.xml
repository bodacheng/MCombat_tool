<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@2.41">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.8.5"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.8.5">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Unity 2020用iOSクライアントビルド</description>
  <displayName>[iOS]本番ビルド（ストアへのアップロード含む）</displayName>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <org.jenkinsci.plugins.workflow.job.properties.DisableResumeJobProperty/>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.5.20">
      <gitLabConnection>GitLab Integration</gitLabConnection>
      <jobCredentialId/>
      <useAlternativeCredential>false</useAlternativeCredential>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.32">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.2">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <com.cwctravel.hudson.plugins.extended__choice__parameter.ExtendedChoiceParameterDefinition plugin="extended-choice-parameter@0.82">
          <name>BRANCH</name>
          <description>ブランチを選択してください</description>
          <quoteValue>false</quoteValue>
          <saveJSONParameterToFile>false</saveJSONParameterToFile>
          <visibleItemCount>5</visibleItemCount>
          <type>PT_SINGLE_SELECT</type>
          <groovyScript>#!/usr/bin/env groovy

import hudson.model.*
import jenkins.model.*

def listBranches() {
    def gitURL = 'https://git-1.cocone.jp/projectp3/p3-client'
    def branches = ("git ls-remote -t -h ${gitURL}").execute()
    return branches.text.readLines().collect { it.split()[1].replaceAll('refs/heads/|refs/tags/', '') }.unique().join(",")
}
return listBranches()</groovyScript>
          <bindings/>
          <groovyClasspath/>
          <defaultValue>master</defaultValue>
          <multiSelectDelimiter>,</multiSelectDelimiter>
        </com.cwctravel.hudson.plugins.extended__choice__parameter.ExtendedChoiceParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>RELEASENOTE</name>
          <description>ビルド内容がわかるリリースノートを記入してください</description>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
        <com.cwctravel.hudson.plugins.extended__choice__parameter.ExtendedChoiceParameterDefinition plugin="extended-choice-parameter@0.82">
          <name>UNITY_VERSION</name>
          <description>Unityのバージョンです</description>
          <quoteValue>false</quoteValue>
          <saveJSONParameterToFile>false</saveJSONParameterToFile>
          <visibleItemCount>2</visibleItemCount>
          <type>PT_SINGLE_SELECT</type>
          <value>2020.3.21f1,2019.4.16f1</value>
          <defaultValue>2020.3.21f1</defaultValue>
          <multiSelectDelimiter>,</multiSelectDelimiter>
        </com.cwctravel.hudson.plugins.extended__choice__parameter.ExtendedChoiceParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>UPLOAD_ASSETS</name>
          <description>Addressableアセットを更新する必要があればチェックしてください。</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>PRE_REGIST</name>
          <description>事前登録用ビルドの場合はチェックしてください</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>30</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.92">
    <script>pipeline {
    agent any

    environment {
        // BRANCHとRELEASENOTEはジョブのパラメーターつきビルドで設定される
        
        // git
        GIT_URL='https://git-1.cocone.jp/projectp3/p3-client'
        GIT_P3_URL='https://git-1.cocone.jp/projectp3/p3-assets'
        GIT_CREDENTIAL='jenkins_gitlab'
        
        // environment values
        UNITY_PATH="/Applications/Unity/Hub/Editor/${UNITY_VERSION}/Unity.app/Contents/MacOS/Unity"
        UNITY_METHOD='Cocone.ProjectP3.Client.Build'
        ADDRESSABLE_METHOD='BuildAddressableAssets.BatchBuild'
        
        // build configuration
        BUILD_TARGET='iOS'
        PRODUCT_NAME=''
        VERSION=""
        OUTPUT_PATH='build_ios'
        BUILD_KIND='OfficialRelease'
        IPA_FILENAME="ipa_file_name"
        IPA_EXECUTABLE_NAME="ipa_executable_name"
        BUILD_CONFIG_DIR='Assets/App/Editor/Build/Configs'
        EXPORT_PLIST_DIR='${BUILD_CONFIG_DIR}/iOS'
        YamlFile = "${BUILD_CONFIG_DIR}/${BUILD_KIND}BuildSettings.yaml"
        
        // appcenter
        APPCENTER_API_TOKEN='33686d7866a23604057424c52b0474392c5c3b7e'// 本番
        APPCENTER_OWNER='coconecorp'
        APPCENTER_APPNAME='Pokepia-iOS-1' //officialrelease
        APPCENTER_GROUPS='COCONE-QA, Collaborators, POKETRIA Members'
        
        // slack
        SLACK_DOMAIN='cocone'
        SLACK_CHANNEL='p3_jenkins'
        
        // asset
        ASSET_VERSION='v1'
        ASSET_PATH='ExtProject/p3-assets'
        }

    stages {
        stage('Git') {
            steps {
                script{
                    def cause = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')
                    USERNAME = cause.userName
                }

                checkout([$class: 'GitSCM',
                    branches: [[name: "$BRANCH"]],
                    extensions: [
                        [$class: 'CloneOption', timeout: 60],
                        [$class: 'CheckoutOption', timeout: 60]
                    ],
                    gitTool: 'Default', 
                    userRemoteConfigs: [[credentialsId: "$GIT_CREDENTIAL", url: "$GIT_URL"]]
                ])
                
                // Git-LFSの値を反映させるための処理
                sh 'git lfs pull'
                sh 'git rm --cached -r .'
                sh 'git reset --hard'
                sh 'git rm .gitattributes'
                sh 'git reset .'
                
                checkout([$class: 'GitSCM',
                    branches: [[name: "$BRANCH"]],
                    extensions: [
                        [$class: 'CloneOption', timeout: 60],
                        [$class: 'CheckoutOption', timeout: 60]
                    ],
                    gitTool: 'Default', 
                    userRemoteConfigs: [[credentialsId: "$GIT_CREDENTIAL", url: "$GIT_URL"]]
                ])
            }
        }
        stage('yaml情報の取得') {
            steps {
                script {
                    def script = $/eval "cat ${YamlFile} | grep -o 'productName: .*$' | sed -e 's/productName: ''//'"/$
                    PRODUCT_NAME = sh(script:"${script}", returnStdout:true)
                    PRODUCT_NAME = PRODUCT_NAME.replaceAll("\n", "")
                    println '-------- PRODUCT_NAME:' + PRODUCT_NAME
                    
                    script = $/eval "cat ${YamlFile} | grep -o 'cfBundleName: .*$' | sed -e 's/cfBundleName: ''//'"/$
                    IPA_FILENAME = sh(script:"${script}", returnStdout:true)
                    IPA_FILENAME = IPA_FILENAME.replaceAll("\n", "")
                    println '-------- IPA_FILENAME:' + IPA_FILENAME
                    
                    script = $/eval "cat ${YamlFile} | grep -o 'cfBundleExecutableName: .*$' | sed -e 's/cfBundleExecutableName: ''//'"/$
                    IPA_EXECUTABLE_NAME = sh(script:"${script}", returnStdout:true)
                    IPA_EXECUTABLE_NAME = IPA_EXECUTABLE_NAME.replaceAll("\n", "")
                    println '--------IPA_EXECUTABLE_NAME:' + IPA_EXECUTABLE_NAME
                }
            }
        }
        stage('Deploy Assets') {
            when {
                expression { 
                   return params.UPLOAD_ASSETS
                }
            }
            steps {
                sh '$UNITY_PATH -projectPath $WORKSPACE -quit -batchmode -executeMethod $ADDRESSABLE_METHOD -buildTarget $BUILD_TARGET -assetVersion $ASSET_VERSION -assetBuildType rebuild'
                sh 's3cmd put -r "$WORKSPACE"/ServerData/dev/"$BUILD_TARGET"/ s3://p3-alpha-coconeimg-jp/asset/dev/"$BUILD_TARGET"/'
            }
        }
        stage('Unity') {
            options {
                timeout(time: 2, unit: 'HOURS')
            }
            
            steps {
                script {
                    if (params.PRE_REGIST.toBoolean()) {
                        PRE_REGIST_PARAM = "-preRegistration"
                    }else{
                        PRE_REGIST_PARAM = ""
                    }
                }

                sh '$UNITY_PATH -projectPath $WORKSPACE -quit -batchmode -executeMethod $UNITY_METHOD -buildTarget $BUILD_TARGET -BuildNumber $BUILD_ID -OutputPath $OUTPUT_PATH $PRE_REGIST_PARAM -buildKind $BUILD_KIND'
            }
        }
        stage('Xcode') {
            steps {
                sh """
                xcodebuild -project "$OUTPUT_PATH"/Unity-iPhone.xcodeproj \
                -configuration Release \
                clean archive -archivePath "$OUTPUT_PATH"/Archive \
                -scheme Unity-iPhone
                """
            }
        }
        stage('Export') {
            steps {
                sh """
                xcodebuild -project "$OUTPUT_PATH"/Unity-iPhone.xcodeproj \
                -exportArchive -archivePath "$OUTPUT_PATH"/archive.xcarchive \
                -exportPath "$OUTPUT_PATH"/Export \
                -exportOptionsPlist "$EXPORT_PLIST_DIR"/ExportOptions_"$BUILD_KIND".plist
                """
            }
        }
        stage('version情報の取得') {
            steps {
                script {
                    def APP_OUTPUT_PATH = "./$OUTPUT_PATH/Export/${IPA_FILENAME}.ipa"
                    def ver_script = $/eval "unzip -p "${APP_OUTPUT_PATH}" Payload/"${IPA_EXECUTABLE_NAME}".app/Info.plist | plutil -convert json -o - -- - | jq -r .CFBundleShortVersionString"/$
                    println ver_script
                    VERSION = sh(script:"${ver_script}", returnStdout: true)
                    echo "version=${VERSION}"
                }
            }
        }
        stage('Deploy') {
            steps {
                // ipaファイルの保存
                archiveArtifacts artifacts: OUTPUT_PATH + "/" + "Export/" + IPA_FILENAME + ".ipa,", fingerprint: true, followSymlinks: false
                
                appCenter apiToken: "$APPCENTER_API_TOKEN",
                    ownerName: "$APPCENTER_OWNER",
                    appName: "$APPCENTER_APPNAME",
                    branchName: '',
                    buildVersion: "$VERSION",
                    commitHash: '',
                    distributionGroups: "$APPCENTER_GROUPS",
                    mandatoryUpdate: false,
                    notifyTesters: true,
                    pathToApp: "$OUTPUT_PATH/Export/${IPA_FILENAME}.ipa",
                    pathToDebugSymbols: '',
                    pathToReleaseNotes: '',
                    releaseNotes: "ビルド${BUILD_ID} ${USERNAME} / RELEASE NOTE: ${RELEASENOTE}"
            }
        }
        stage('upload apple store') {
            steps {
                script {
                    withCredentials([
                    string(credentialsId: 'AppleStore_API_Key', variable: 'API_KEY'),
                    string(credentialsId: 'AppleStore_API_Issuer', variable: 'API_ISSUE')
                    ]) {
                        sh """
                        xcrun altool --validate-app -f $OUTPUT_PATH/Export/"${IPA_FILENAME}".ipa -t ios --apiKey ${API_KEY} --apiIssuer ${API_ISSUE} --verbose
                        xcrun altool --upload-app -f $OUTPUT_PATH/Export/"${IPA_FILENAME}".ipa -t ios --apiKey ${API_KEY} --apiIssuer ${API_ISSUE} --verbose
                        """
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                // Slack投稿用にブランチのログを取得
                GIT_LOG=sh(script: "git log origin/$BRANCH --pretty=short -1", returnStdout: true)
            }
            slackSend channel:"$SLACK_CHANNEL",
                teamDomain: "$SLACK_DOMAIN",
                color: "good",
                message: ":kirby::tada:*ビルド成功 [$JOB_NAME:$BUILD_ID]*:tada::kirby:\n$BUILD_URL\nユーザー : $USERNAME\nbranch : $BRANCH \n$GIT_LOG\n--------------------\n[ReleaseNote]\n$RELEASENOTE\n[&lt;https://appcenter.ms/orgs/$APPCENTER_OWNER/apps/$APPCENTER_APPNAME/|Install App&gt;]"
        }
        failure {
            slackSend channel:"$SLACK_CHANNEL",
                teamDomain: "$SLACK_DOMAIN",
                color: "danger",
                message: ":skull:*ビルド失敗 [$JOB_NAME:$BUILD_ID]*:skull:\n$BUILD_URL\nユーザー : $USERNAME\nbranch : $BRANCH"
        }
        aborted {
            slackSend channel:"$SLACK_CHANNEL",
                teamDomain: "$SLACK_DOMAIN",
                color: "warning",
                message: ":construction:*ビルド中断 [$JOB_NAME:$BUILD_ID]*:construction:\n$BUILD_URL\nユーザー : $USERNAME\nbranch : $BRANCH"
        }
    }
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>